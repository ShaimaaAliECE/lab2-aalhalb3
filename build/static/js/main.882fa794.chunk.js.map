{"version":3,"sources":["Circle.js","Board.js","Game.js","App.js","index.js"],"names":["Circle","value","onClick","className","Board","circleBut","map","circle","i","Game","useState","Array","fill","board","setBoard","firstPlayer","setFirstPlayer","winner","buttons","winningPatterns","length","a","b","c","d","Winner","newBoard","App","ReactDOM","render","document","getElementById"],"mappings":"2KAceA,EAXA,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACpB,OAEI,aADA,CACA,UAAQC,UAAY,SAASD,QAAWA,EAAxC,SAEQD,KCODG,EAXD,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,UAAWH,EAAa,EAAbA,QACvB,OAEI,aADA,CACA,OAAKC,UAAY,aAAjB,SACKE,EAAUC,KAAI,SAACC,EAAOC,GACnB,OAAO,cAAC,EAAD,CAAkBP,MAASM,EAAQL,QAAW,kBAAMA,EAASM,KAA9CA,SCyDvBC,EAxCF,WACT,MAA0BC,mBAASC,MAAM,IAAIC,KAAK,OAAlD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACMC,EA1BK,SAACC,GAcZ,IAZA,IAAMC,EAAiB,CACnB,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,GAAG,GAAG,GAAG,IACV,CAAC,EAAE,EAAE,EAAE,IACP,CAAC,EAAE,EAAE,EAAE,IACP,CAAC,EAAE,EAAE,GAAG,IACR,CAAC,EAAE,EAAE,GAAG,KAIHX,EAAI,EAAGA,EAAIW,EAAgBC,OAAQZ,IAAI,CAC5C,kBAAkBW,EAAgBX,GAAlC,GAAOa,EAAP,KAASC,EAAT,KAAWC,EAAX,KAAaC,EAAb,KACA,GAAIN,EAAQG,IAAMH,EAAQG,KAAOH,EAASI,IAAMJ,EAAQG,KAAOH,EAASK,IAAML,EAAQG,KAAOH,EAAQM,GACjG,OAAON,EAAQG,GAGvB,OAAO,KAMQI,CAAOZ,GAoBtB,OAEI,cADA,CACA,sBACI,cAAC,EAAD,CAAOR,UAAaQ,EAAOX,QArBd,SAACM,GAElB,IAAMkB,EAAQ,YAAOb,GAEjBI,GAAUS,EAASlB,KAInBkB,EAASlB,GADTO,EACc,MAEA,SAIlBD,EAASY,GACTV,GAAgBD,OAQZ,qBAAKZ,UAAY,aAAjB,SACI,4BAEQc,EAAS,WAAaA,EAAS,iBAAmBF,EAAc,MAAQ,kBClDjFY,EAJH,WACR,OAAO,cAAC,EAAD,KCAXC,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.882fa794.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './index.css';\r\n\r\nconst Circle = ({value, onClick}) => {\r\n    return (\r\n        //creates a button with the given css className and stores a value (RED or YELLOW) into it\r\n        <button className = \"button\" onClick = {onClick}>\r\n            {\r\n                value\r\n            }\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Circle;","import React from 'react';\r\nimport Circle from './Circle';\r\nimport './index.css';\r\n\r\nconst Board = ({circleBut, onClick}) => {\r\n    return (\r\n        //use the boardStyle class from the index.css file\r\n        <div className = \"boardStyle\">\r\n            {circleBut.map((circle,i) => {\r\n                return <Circle key = {i} value = {circle} onClick = {() => onClick (i)} />\r\n            }) /* call the circle React function and create as many circle buttons as \"i\" specifies using map. Each button is unique */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React, {useState} from 'react';\r\nimport Board from './Board';\r\n\r\nconst Winner = (buttons) => {\r\n    //List of all possible winning patterns in the game\r\n    const winningPatterns =[\r\n        [0,1,2,3],\r\n        [4,5,6,7],\r\n        [8,9,10,11],\r\n        [12,13,14,15],\r\n        [0,4,8,12],\r\n        [1,5,9,13],\r\n        [2,6,10,14],\r\n        [3,7,11,15]\r\n    ];\r\n\r\n    //checks if the values (a,b,c,d) are the same as one another, which will then determine the winner\r\n    for (let i = 0; i < winningPatterns.length; i++){\r\n        const [a,b,c,d] = winningPatterns[i];\r\n        if (buttons[a] && buttons[a] === buttons [b] && buttons[a] === buttons [c] && buttons[a] === buttons[d]){\r\n            return buttons[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nconst Game = () => {\r\n    const [board, setBoard] = useState(Array(16).fill(null));\r\n    const [firstPlayer, setFirstPlayer] = useState(true);\r\n    const winner = Winner(board);\r\n\r\n    const clickHandler = (i) => {\r\n        //duplicates the original game board\r\n        const newBoard = [...board];\r\n\r\n        if (winner || newBoard[i]) return;\r\n\r\n        //if it's the first player's turn, then they are red, else (2nd player), they are yellow\r\n        if (firstPlayer){\r\n            newBoard[i] = 'RED';\r\n        }else{\r\n            newBoard[i] = 'YELLOW';\r\n        }\r\n\r\n        //sets the original board state to the new board\r\n        setBoard(newBoard);\r\n        setFirstPlayer(!firstPlayer);\r\n    }\r\n\r\n    return (\r\n        //returns the Board react function and assigns the 2 parameters (clickBut and onClick) board and clickHandler respectively\r\n        <>\r\n            <Board circleBut = {board} onClick = {clickHandler} />\r\n\r\n            <div className = 'winnerText'>\r\n                <p>\r\n                    {//conditional statement checking if winner is true then change the text value to winner. Else, keep showing which player's turn it is.\r\n                        winner ? 'Winner: ' + winner : 'Next Player: ' + (firstPlayer ? 'RED' : 'YELLOW')\r\n                    }\r\n                </p>\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport Game from './Game';\r\n\r\nconst App = () => {\r\n    return <Game />;\r\n}\r\n\r\nexport default App;","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  //render App functionn\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}